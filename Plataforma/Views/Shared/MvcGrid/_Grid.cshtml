@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.Extensions.Primitives;
@model IGrid

@{
    var showTotalTop = ((bool?)Model?.Attributes?.FirstOrDefault(t => t.Key == "totalTop").Value) ?? false;
    var showTotalBottom = ((bool?)Model?.Attributes?.FirstOrDefault(t => t.Key == "totalBottom").Value) ?? false;

    var totalRows = 0;
    var currentRows = 0;

    if (Model != null) {
        if (showTotalBottom || showTotalTop) {
            currentRows = Model.Rows.Count();
            totalRows = currentRows;
            if (Model.Pager != null)
                totalRows = Model.Pager.TotalRows;
        }
    }
    var totalMessage = $"{currentRows} de {totalRows} registos";
}



<div id="@Model.Id" class="mvc-grid mvc-grid-@(Model.FilterMode.ToString().ToLower())-mode" data-name="@Model.Name" data-filter-mode="@Model.FilterMode" data-url="@Model.Url">
    @if (!Model.Rows.Any() && Model.EmptyText != null) {
        <div class="mvc-grid-empty">@Html.Raw(Model.EmptyText)</div>
    } else {
        @if (showTotalTop) {
            <div>@totalMessage</div>
        }
        <div class="table-responsive">
            <!table@(Model.Attributes) class="table table-striped table-hover bg-white">
                @{
                    if (Model.FilterMode != GridFilterMode.Row) {
                        <thead>
                        <tr class="mvc-grid-headers@(Model.FilterMode == GridFilterMode.Header ? " mvc-grid-row-filters" : "")">
                            @foreach (var column in Model.Columns) {
                                var applied = (column.Filter.First ?? column.Filter.Second) == null ? "" : " applied";

                                <th@(column.AsAttributes())>
                                    @if (column.Filter.IsEnabled == true && !string.IsNullOrEmpty(column.Filter.Name) && Model.FilterMode != GridFilterMode.Row) {
                                        if (Model.FilterMode == GridFilterMode.Header) {
                                            string[] values = column.Filter.First?.Values ?? StringValues.Empty;
                                            var size = column.Title is string { Length: > 0 } title ? title.Length : 20;

                                            <div>
                                                @if (column.Filter.Options.Any()) {
                                                    values = column.Filter.Options.Where(option => values.Contains(option.Value)).Select(option => option.Text).ToArray();

                                                    <input class="mvc-grid-value" value="@string.Join(", ", values)" size="@size" placeholder="@column.Title" tabindex="-1" readonly />
                                                } else {
                                                    <input class="mvc-grid-value" value="@string.Join(", ", values)" size="@size" placeholder="@column.Title" />
                                                }
                                            </div>
                                        } else {
                                            <span class="mvc-grid-title">@column.Title</span>
                                        }

                                        <select class="mvc-grid-options">
                                            @foreach (var option in column.Filter.Options) {
                                                <option value="@option.Value">@option.Text</option>
                                            }
                                        </select>

                                        if (column.Sort.IsEnabled == true) {
                                            <button type="button" class="mvc-grid-sort"><span class="sortable-up"><i class="fa-solid fa-arrow-up-z-a"></i></span><span class="sortable-down"><i class="fa-solid fa-arrow-down-a-z"></i></span><span class="sortable-none"><i class="fa-solid fa-arrow-up-long"></i><i class="fa-solid fa-arrow-down-long"></i></span></button>
                                        }

                                        <button type="button" class="mvc-grid-filter@(applied)"></button>
                                    } else {
                                        <span class="mvc-grid-title">@column.Title</span>

                                        if (column.Sort.IsEnabled == true) {
                                            <button type="button" class="mvc-grid-sort"><span class="sortable-up"><i class="fa-solid fa-arrow-up-z-a"></i></span><span class="sortable-down"><i class="fa-solid fa-arrow-down-a-z"></i></span><span class="sortable-none"><i class="fa-solid fa-arrow-up-long"></i><i class="fa-solid fa-arrow-down-long"></i></span></button>
                                        }
                                    }
                                </th>
                            }
                            <th class="w-100"></th>
                        </tr>
                        @if (Model.FilterMode == GridFilterMode.Row) {
                            <tr class="mvc-grid-row-filters">
                                @foreach (var column in Model.Columns) {
                                    var hidden = column.IsHidden ? " mvc-grid-hidden" : "";

                                    if (column.Filter.IsEnabled == true && !string.IsNullOrEmpty(column.Filter.Name)) {
                                        var applied = (column.Filter.First ?? column.Filter.Second) == null ? "" : " applied";

                                        <th class="filterable@(column.CssClasses)@(hidden)">
                                            <div>
                                                @if (column.Filter.Options.Any()) {
                                                    if (column.Filter.Type == GridFilterType.Multi) {
                                                        string[] values = column.Filter.First?.Values ?? StringValues.Empty;
                                                        values = column.Filter.Options.Where(option => values.Contains(option.Value)).Select(option => option.Text).ToArray();

                                                        <input class="mvc-grid-value" value="@string.Join(", ", values)" tabindex="-1" readonly />

                                                        <select class="mvc-grid-options">
                                                            @foreach (var option in column.Filter.Options) {
                                                                <option value="@option.Value">@option.Text</option>
                                                            }
                                                        </select>
                                                    } else {
                                                        <select class="mvc-grid-value">
                                                            @foreach (var option in column.Filter.Options) {
                                                                if (column.Filter.First?.Values.Contains(option.Value) == true) {
                                                                    <option value="@option.Value" selected>@option.Text</option>
                                                                } else {
                                                                    <option value="@option.Value">@option.Text</option>
                                                                }
                                                            }
                                                        </select>
                                                    }
                                                } else {
                                                    <input class="mvc-grid-value" value="@column.Filter.First?.Values" />
                                                }
                                                <button type="button" class="mvc-grid-filter@(applied)"></button>
                                            </div>
                                        </th>
                                    } else {
                                        <th class="@(column.CssClasses)@(hidden)"></th>
                                    }
                                }
                                <th class="w-100"></th>
                            </tr>
                        }
                        </thead>
                    }
                }

                <tbody>
                @foreach (var row in Model.Rows) {
                    <!tr@(row.Attributes)>
                        @foreach (var column in Model.Columns) {
                            var classes = (column.IsHidden ? column.CssClasses + " mvc-grid-hidden" : column.CssClasses).Trim();
                            if (string.IsNullOrEmpty(classes)) {
                                <td class="p-2"><div class="table-td-content">@column.ValueFor(row)</div></td>
                            } else {
                                <td class="p-2 @classes"><div class="table-td-content">@column.ValueFor(row)</div></td>
                            }
                        }
                        <td class="w-100"></td>
                    </!tr>
                }
                @if (!Model.Rows.Any() && Model.EmptyText != null) {
                    <tr class="mvc-grid-empty-row">
                        <td class="p-2" colspan="@Model.Columns.Count()">
                            <div class="table-td-content">@Html.Raw(Model.EmptyText)</div>
                        </td>
                    </tr>
                }

                </tbody>
                @if (!string.IsNullOrEmpty(Model.FooterPartialViewName)) {
                    <tfoot>
                    @await Html.PartialAsync(Model.FooterPartialViewName, Model)
                    </tfoot>
                }
            </!table>
        </div>
                
        @if (showTotalBottom) {
            <div>@totalMessage</div>
        }

        @if (Model.Pager != null) {
            @await Html.PartialAsync(Model.Pager.PartialViewName, Model.Pager)
        }
    }

</div>

